openapi: "3.0.2"
info:
  title: BitMaelum keyresolver API
  version: "1.0"

  x-logo:
    url: "https://bitmaelum.com/logo_and_name.svg"
    backgroundColor: "#FFFFFF"
    altText: "BitMaelum"

  contact:
      name: BitMaelum Support
      url: 'https://www.bitmaelum.com/'
      email: support@bitmaelum.com
  license:
    name: MIT
    url: 'https://raw.githubusercontent.com/bitmaelum/key-resolver-go/master/LICENSE'
  description:
    $ref: introduction.md

components:
  schemas:

    ConfigOut:
      type: object
      required:
        - proof_of_work
      properties:
        proof_of_work:
          type: object
          required:
            - address
            - organisation
          properties:
            address:
              type: integer
              example: 27
              description: The number of bits required for an address object proof of work
            organisation:
              type: integer
              example: 27
              description: The number of bits required for an organisation object proof of work

    GenericResultOut:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - ok
            - error
          description: Result status. Either ok (success) or error (unsuccessfuly). Note that 200 status code returns CAN respond with an error.
        message:
          type: string
          description: The error message or any status message that might be important

    AddressOut:
      type: object
      required:
        - hash
        - public_key
        - proof
        - serial_number
      properties:
        hash:
          type: string
          example: "2244643da7475120bf84d744435d15ea297c36ca165ea0baaa69ec818d0e952f"
          description: The BitMaelum hash of the address object
        public_key:
          type: string
          example: "rsa MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvzbZbLUcFRy8fii8zZ7KI8X6cUxjD/Duf4wSqi+jMCcxPuZU1/YX8QhDNyVnnutOz/bJJTSLiJt4zuphCDqjf6lhR+wCrB1hZxqwiNbMHM0cdvaScgMj6lS8xboheZ5n39+jtfjdigIxz7DUtGFzzLeGzj3ENRrPEwkmYooCAh3s0PdrHeN461jNrMOJArqd4vJ0VyCr9Vd6fPSN0OoW6ju7NeqynDBbs4iKHcCyDPXrlWY6e3ihCJ6ksw8dNbbA+RlsHHBU7pOk7Myk0T3wTK+/FcmUbjHxaDKJcP0Cao/Hrog3wAYshnGnjdVkK+YfXgeo7o2TU1apzqLJsORTyQIDAQAB"
          description: The CURRENT public key of the address object
        proof:
          type: string
          example: "27$MmU0NTUxZGU4MDRlMjdhYWNmMjBmOWRmNWJlM2U4Y2QzODRlZDY0NDg4YjIxYWIwNzlmYjU4ZThjOTAwNjhhYg==$180774681"
          description: The proof of work for the address object
        serial_number:
          type: integer
          example: 1609964031705632800
          description: Current serial number of the address object
        routing_id:
          type: string
          example: "323250728593e92f50bf1572d10318912fd611dd0f4e5d36726c0c0757b29e03"
          description: The routing object id for this address object
        redirect_hash:
          type: string
          description: The hash to which this address object is redirected to in case of a redirected object

    RoutingOut:
      type: object
      required:
        - hash
        - public_key
        - routing
        - serial_number
      properties:
        hash:
          type: string
          example: "323250728593e92f50bf1572d10318912fd611dd0f4e5d36726c0c0757b29e03"
          description: The hash of the routing object
        public_key:
          type: string
          example: "ed25519 MCowBQYDK2VwAyEAvGQhl5wUx3F2RunI3dU74atL3kbBTvJg+QkrErEUivk="
          description: The CURRENT public key of the routing object
        routing:
          type: string
          example: "bitmaelum.noxlogic.nl"
          description: The actual URL or IP that points to this routing object
        serial_number:
          type: integer
          example: 1607509742876620000
          description: Current serial number of the routing object

    RoutingIn:
      type: object
      required:
        - public_key
        - routing
      properties:
        public_key:
          type: string
          example: "ed25519 MCowBQYDK2VwAyEAvGQhl5wUx3F2RunI3dU74atL3kbBTvJg+QkrErEUivk="
          description: New public key for this routing object
        routing:
          type: string
          example: "bitmaelum.noxlogic.nl"
          description: New routing URL or IP for this routing object

    OrganisationOut:
      type: object
      required:
        - hash
        - public_key
        - proof
        - validations
        - serial_number
      properties:
        hash:
          type: string
          example: "323250728593e92f50bf1572d10318912fd611dd0f4e5d36726c0c0757b29e03"
          description: The hash of the organisation object
        public_key:
          type: string
          example: "ed25519 MCowBQYDK2VwAyEAvGQhl5wUx3F2RunI3dU74atL3kbBTvJg+QkrErEUivk="
          description: The CURRENT public key of the organisation object
        proof:
          type: string
          example: "27$MmU0NTUxZGU4MDRlMjdhYWNmMjBmOWRmNWJlM2U4Y2QzODRlZDY0NDg4YjIxYWIwNzlmYjU4ZThjOTAwNjhhYg==$180774681"
          description: The proof of work for the organisation object
        serial_number:
          type: integer
          example: 1607509742876620000
          description: Current serial number of the organisation object

tags:
  - name: "address"
    description: "Operations on address objects"
  - name: "organisation"
    description: "Operations on organisation objects"
  - name: "routing"
    description: "Operations on routing objects"
  - name: "misc"
    description: "Miscellaneous operations"

servers:
  - url: https://resolver.bitmaelum.com
    description: Live key resolver endpoint
  - url: https://resolver-staging.bitmaelum.com
    description: Staging key resolver endpoint. This endpoint may contain an incompatible version with the LIVE endpoint, however, it will use the same data store.

paths:
  /:
    get:
      tags:
      - "misc"
      summary: "Retrieves the main index (logo) of the key resolver."
      description:
        This endpoint is for entertainment purposes only.
      responses:
        '200':
          description: Returns the main logo in HTML format

  /config.json:
    get:
      tags:
        - "misc"
      summary: "Retrieves the key resolver configuration settings."
      description: |
        The key resolver configuration dictates how certain inputs should adhere to. For now, this means that
        it will return the minimum number of bits for proof-of-work that needs to be done before accepting
        an address or organisation.
      responses:
        '200':
          description: Key resolver configuration settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigOut"
              example:
                value:
                  {
                    "proof_of_work": {
                      "address": 27,
                      "organisation": 29
                    }
                  }

  /address/{hash}:
    parameters:
    - name: "hash"
      in: "path"
      example: 2244643da7475120bf84d744435d15ea297c36ca165ea0baaa69ec818d0e952f
      description: "hash of the address object to query"
      required: true
      schema:
        type: "string"

    get:
      tags:
        - "address"
      summary: Retrieves information about an address object
      responses:
        '200':
          description: Returns the current address object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressOut"
        '400':
          description: Incorrect address hash specified
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "error",
                  message: "incorrect address hash"
                }
        '404':
          description: Address object not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "error",
                  message: "address object not found"
                }

    post:
      tags:
        - "address"
      summary: Creates or updates an address object
      responses:
        '200':
          description: Successfully updated the address object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "ok",
                  message: "address object updated"
                }
        '201':
          description: Successfully created the address object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "ok",
                  message: "address object created"
                }

    delete:
      tags:
        - "address"
      summary: Deletes/purges an address object
      responses:
        '200':
          description: Address object successfully deleted

  /address/{hash}/delete:
    parameters:
    - name: "hash"
      in: "path"
      description: "hash of the address object to delete"
      required: true
      schema:
        type: "string"
    post:
      tags:
        - "address"
      summary: Soft-deletes an address object
      responses:
        '200':
          description: Address object deleted

  /address/{hash}/undelete:
    parameters:
    - name: "hash"
      in: "path"
      description: "hash of the address to undelete"
      required: true
      schema:
        type: "string"
    post:
      tags:
        - "address"
      summary: Undeletes a soft-deleted address object
      responses:
        '200':
          description: Address object undeleted

  /address/{hash}/status/{fingerprint}:
    parameters:
    - name: "hash"
      in: "path"
      description: "hash of the address to query"
      required: true
      schema:
        type: "string"
    - name: "fingerprint"
      in: "path"
      description: "fingerprint of the key to query"
      required: true
      schema:
        type: "string"

    get:
      tags:
        - "address"
      summary: Queries if a key (fingerprint) exists in the history off the given account
      responses:
        '200':
          description: Create or updated address
    post:
      tags:
        - "address"
      summary: Posts a key (fingerprint) status update
      responses:
        '200':
          description: Create or updated address

  /routing/{hash}:
    parameters:
    - name: "hash"
      in: "path"
      description: "routing object to query"
      required: true
      example: 323250728593e92f50bf1572d10318912fd611dd0f4e5d36726c0c0757b29e03
      schema:
        type: "string"

    get:
      tags:
        - "routing"
      summary: Queries a routing object by ID
      responses:
        '200':
          description: Returns the routing object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutingOut"
        '404':
          description: Routing object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "error",
                    message: "routing not found"
                  }

    post:
      tags:
        - "routing"
      summary: Creates or updates a routing object
      requestBody:
        description: Routing object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoutingIn"
      responses:
        '200':
          description: Created or updated routing object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "ok",
                    message: "routing created"
                  }
        '500':
          description: Internal error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "error",
                    message: "internal error"
                  }
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "error",
                    message: "invalid data"
                  }
        '401':
          description: Authentication failed (update only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "error",
                    message: "authentication failed"
                  }

    delete:
      tags:
        - "routing"
      summary: Deletes/purges a routing object
      responses:
        '200':
          description: Remove/purge a routing object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "ok",
                    message: "successfully deleted routing"
                  }
        '500':
          description: Internal error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "error",
                    message: "internal error occurred"
                  }
        '404':
          description: Routing object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "error",
                    message: "routing not found"
                  }
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResultOut'
                example:
                  {
                    status: "error",
                    message: "authentication failed"
                  }

  /organisation/{hash}:
    parameters:
    - name: "hash"
      in: "path"
      description: "hash of the organisation object to query"
      required: true
      schema:
        type: "string"

    get:
      tags:
        - "organisation"
      summary: Returns an organisation object
      description: |
        This endpoint will return an organisation object based on its hash. Deactivated organisations cannot be found.
        There is no difference in return values wheter an object is deactivated or simply does not exist.
      responses:
        '200':
          description: Retrieve organisation object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationOut"
        '404':
          description: Organisation object not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "error",
                  message: "organisation not found"
                }
    post:
      tags:
        - "organisation"
      summary: Create or update an organisation object
      description:
        This call either creates an organisation object, or updates an existing one. When creating an object, no
        authentication is needed. When updating an existing object, an authentication token must be present.
      responses:
        '200':
          description: Create or update organisation

    delete:
      tags:
        - "organisation"
      summary: Purges an organisation object
      description:
        This call will purge an organisation object from the key resolver. It cannot be undone. Once purged, the
        organisation is considered available for other users to claim. An organisation object can only be deleted
        once it has been deactivated. Active organisation objects cannot be purged.
      responses:
        '200':
          description: Remove/purge an organisation object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "ok",
                  message: "organisation deleted"
                }
        '500':
          description: Internal error occurred
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "error",
                  message: "internal error"
                }
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "error",
                  message: "organisation not found"
                }
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericResultOut'
              example:
                {
                  status: "error",
                  message: "unauthenticated"
                }


  /organisation/{hash}/delete:
    parameters:
    - name: "hash"
      in: "path"
      description: "hash of the organisation to query"
      required: true
      schema:
        type: "string"
    post:
      tags:
        - "organisation"
      summary: Soft delete an organisation object
      description: |
        An organisation object can be soft-deleted. This will deactivate the organisation and will not found when querying
        the object's hash. It will automatically be purged from the system after a (unspecified) number of days. An object
        can be restored through an undelete request until it's purged. Until that time, the object cannot be taken over by
        other users.
      responses:
        '500':
          description: Not yet implemented

  /organisation/{hash}/undelete:
    parameters:
    - name: "hash"
      in: "path"
      description: "hash of the organisation to query"
      required: true
      schema:
        type: "string"
    post:
      tags:
        - "organisation"
      summary: Undeletes a soft-deleted organisation object
      description: |
        An organisation object can be restored/activated after it has been deactivated and not yet purged by the resolver.
        This allows for correcting accidental mistakes.
      responses:
        '500':
          description: Not yet implemented
